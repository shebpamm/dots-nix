#!/usr/bin/env bash

# ensure we were given two command line arguments
if [[ $# -ne 2 ]]; then
	echo 'usage: vault-cp SOURCE DEST' >&2
	exit 1
fi

source=$1
dest=$2

# check for dependencies
if ! command -v jq > /dev/null; then
	echo 'vault-cp: required command "jq" was not found' >&2
	exit 1
fi

# check for existing values; this is ugly, but
# the `vault read` command always exits with 0
source_json=$(vault kv get -format=json "$source" 2>&1)
if [[ $source_json == "No value found at $source" ]]; then
	echo "$source_json" >&2
	exit 1
fi

source_data=$(echo "$source_json" | jq '.data.data')
[[ -n $DEBUG ]] && printf '%s\n' "$source_data"

dest_check=$(vault kv get "$dest" 2>&1 1> /dev/null)
if [[ $dest_check != "No value found at $dest" ]]; then
	overwrite='n'
	printf 'Destination "%s" already exists...overwrite? [y/N] ' "$dest"
	read -r overwrite

	# only overwrite if user explicitly confirms
	if [[ ! $overwrite =~ ^[Yy]$ ]]; then
		echo 'vault-cp: copying has been aborted' >&2
		exit 1
	fi
fi

echo "$source_data" | vault kv put "$dest" -
