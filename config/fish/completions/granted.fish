# granted fish shell completion

function __fish_granted_no_subcommand --description 'Test if there has been any subcommand yet'
    for i in (commandline -opc)
        if contains -- $i browser set set-sso settings print profile-order set export-suffix set request-url set clear set completion help h token sso-tokens list clear expiry uninstall sso generate populate login credentials add import update list remove export-plaintext rotate import-from-env credential-process registry add sync remove migrate setup console login experimental exp request aws latest cache clear list auth configure login logout context switch request latest check close doctor rds proxy common-fate cf console eks proxy help h
            return 1
        end
    end
    return 0
end

complete -c granted -n '__fish_granted_no_subcommand' -f -l verbose -d 'Log debug messages'
complete -c granted -n '__fish_granted_no_subcommand' -f -l aws-config-file -r
complete -c granted -n '__fish_granted_no_subcommand' -f -l help -s h -d 'show help'
complete -c granted -n '__fish_granted_no_subcommand' -f -l version -s v -d 'print the version'
complete -c granted -n '__fish_granted_no_subcommand' -f -l help -s h -d 'show help'
complete -c granted -n '__fish_granted_no_subcommand' -f -l version -s v -d 'print the version'
complete -c granted -n '__fish_seen_subcommand_from browser' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'browser' -d 'View the web browser that Granted uses to open cloud consoles'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from browser' -a 'set' -d 'Change the web browser that Granted uses to open cloud consoles'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l browser -s b -r -d 'Specify a default browser without prompts, e.g `-b firefox`, `-b chrome`'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l path -s p -r -d 'Specify a path to the browser without prompts, requires -browser to be provided'
complete -c granted -n '__fish_seen_subcommand_from set-sso' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from browser' -a 'set-sso' -d 'Change the web browser that Granted uses to sso flows'
complete -c granted -n '__fish_seen_subcommand_from set-sso' -f -l browser -s b -r -d 'Specify a default browser without prompts, e.g `-b firefox`, `-b chrome`'
complete -c granted -n '__fish_seen_subcommand_from set-sso' -f -l path -s p -r -d 'Specify a path to the browser without prompts, requires -browser to be provided'
complete -c granted -n '__fish_seen_subcommand_from settings' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'settings' -d 'Manage Granted settings'
complete -c granted -n '__fish_seen_subcommand_from print' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from settings' -a 'print' -d 'List Granted Settings'
complete -c granted -n '__fish_seen_subcommand_from profile-order' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from settings' -a 'profile-order' -d 'Update profile ordering when assuming'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from profile-order' -a 'set' -d 'Sets the method of ordering IAM profiles in the assume method'
complete -c granted -n '__fish_seen_subcommand_from export-suffix' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from settings' -a 'export-suffix' -d 'suffix to be added when exporting credentials using granteds --export flag.'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from export-suffix' -a 'set' -d 'sets a suffix to be added when exporting credentials using granteds --export flag.'
complete -c granted -n '__fish_seen_subcommand_from request-url' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from settings' -a 'request-url' -d 'Set the request URL for credential_process command (connection to Granted Approvals)'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request-url' -a 'set' -d 'Set the request URL for Common Fate'
complete -c granted -n '__fish_seen_subcommand_from clear' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request-url' -a 'clear' -d 'Clears the current request URL'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from settings' -a 'set' -d 'Set a value in settings'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l setting -s s -r -d 'The name of a configuration setting, currently only string, int and bool types are supported. e.g \'DisableUsageTips\'. For other configuration, set the value using builtin commands or by directly modifying the config file for advanced use cases.'
complete -c granted -n '__fish_seen_subcommand_from set' -f -l value -s v -r -d 'The value to set the configuration setting to'
complete -c granted -n '__fish_seen_subcommand_from completion' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'completion' -d 'Add autocomplete to your granted cli installation'
complete -c granted -n '__fish_seen_subcommand_from completion' -f -l shell -s s -r -d 'Shell to install completions for (fish, zsh, tcsh, bash)'
complete -c granted -n '__fish_seen_subcommand_from completion' -f -l help -s h -d 'show help'
complete -c granted -n '__fish_seen_subcommand_from help h' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from completion' -a 'help h' -d 'Shows a list of commands or help for one command'
complete -c granted -n '__fish_seen_subcommand_from token' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'token' -d 'Deprecated: Use \'sso-tokens\' instead'
complete -c granted -n '__fish_seen_subcommand_from sso-tokens' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'sso-tokens' -d 'Manage AWS SSO tokens'
complete -c granted -n '__fish_seen_subcommand_from list' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from sso-tokens' -a 'list' -d 'Lists all access tokens saved in the keyring'
complete -c granted -n '__fish_seen_subcommand_from clear' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from sso-tokens' -a 'clear' -d 'Remove a selected token from the keyring'
complete -c granted -n '__fish_seen_subcommand_from clear' -f -l all -s a -d 'Remove all saved tokens from keyring'
complete -c granted -n '__fish_seen_subcommand_from expiry' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from sso-tokens' -a 'expiry' -d 'Lists expiry status for all access tokens saved in the keyring'
complete -c granted -n '__fish_seen_subcommand_from expiry' -f -l url -r -d 'If provided, prints the expiry of the token for the specific SSO URL'
complete -c granted -n '__fish_seen_subcommand_from expiry' -f -l json -d 'If provided, prints the expiry of the tokens in JSON'
complete -c granted -n '__fish_seen_subcommand_from uninstall' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'uninstall' -d 'Remove all Granted configuration'
complete -c granted -n '__fish_seen_subcommand_from sso' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'sso' -d 'Manage your local AWS configuration file from information available in AWS SSO'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from sso' -a 'generate' -d 'Prints an AWS configuration file to stdout with profiles from accounts and roles available in AWS SSO'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l config -r -d 'Specify the SSO config section in the Granted config file ([SSO.name])'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l prefix -r -d 'Specify a prefix for all generated profile names'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l sso-region -r -d 'Specify the SSO region'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l source -r -d 'The sources to load AWS profiles from (valid values are: \'aws-sso\', \'commonfate\')'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l no-credential-process -d 'Generate profiles without the Granted credential-process integration'
complete -c granted -n '__fish_seen_subcommand_from generate' -f -l profile-template -r -d 'Specify profile name template'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from sso' -a 'populate' -d 'Populate your local AWS configuration file with profiles from accounts and roles available in AWS SSO'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l config -r -d 'Specify the SSO config section ([SSO.name])'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l prefix -r -d 'Specify a prefix for all generated profile names'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l sso-region -r -d 'Specify the SSO region'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l sso-scope -r -d 'Specify the SSO scopes'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l source -r -d 'The sources to load AWS profiles from'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l prune -d 'Remove any generated profiles with the \'common_fate_generated_from\' key which no longer exist'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l profile-template -r -d 'Specify profile name template'
complete -c granted -n '__fish_seen_subcommand_from populate' -f -l no-credential-process -d 'Generate profiles without the Granted credential-process integration'
complete -c granted -n '__fish_seen_subcommand_from login' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from sso' -a 'login' -d 'Log in via AWS SSO interactive credential process'
complete -c granted -n '__fish_seen_subcommand_from login' -f -l sso-region -r -d 'Specify the SSO region'
complete -c granted -n '__fish_seen_subcommand_from login' -f -l sso-start-url -r -d 'Specify the SSO start url'
complete -c granted -n '__fish_seen_subcommand_from login' -f -l sso-scope -r -d 'Specify the SSO scopes'
complete -c granted -n '__fish_seen_subcommand_from credentials' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'credentials' -d 'Manage secure IAM credentials'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'add' -d 'Add IAM credentials to secure storage'
complete -c granted -n '__fish_seen_subcommand_from import' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'import' -d 'Import plaintext IAM user credentials from AWS credentials file into secure storage'
complete -c granted -n '__fish_seen_subcommand_from import' -f -l overwrite -d 'Overwrite an existing profile saved in secure storage with values from the AWS credentials file'
complete -c granted -n '__fish_seen_subcommand_from update' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'update' -d 'Update existing credentials in secure storage'
complete -c granted -n '__fish_seen_subcommand_from list' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'list' -d 'Lists the profile names for credentials in secure storage'
complete -c granted -n '__fish_seen_subcommand_from remove' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'remove' -d 'Remove credentials from secure storage and an associated profile if it exists in the AWS config file'
complete -c granted -n '__fish_seen_subcommand_from remove' -f -l all -s a -d 'Remove all credentials from secure storage and an associated profile if it exists in the AWS config file'
complete -c granted -n '__fish_seen_subcommand_from export-plaintext' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'export-plaintext' -d 'Export credentials from the secure storage to ~/.aws/credentials file in plaintext'
complete -c granted -n '__fish_seen_subcommand_from export-plaintext' -f -l all -s a -d 'export all credentials from secure storage in plaintext'
complete -c granted -n '__fish_seen_subcommand_from rotate' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'rotate' -d 'Generates new access key for the profile in AWS, and updates the profile'
complete -c granted -n '__fish_seen_subcommand_from rotate' -f -l profile -r -d 'If provided, generates new access key for the specified profile'
complete -c granted -n '__fish_seen_subcommand_from rotate' -f -l delete -d 'delete the previous active key'
complete -c granted -n '__fish_seen_subcommand_from import-from-env' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from credentials' -a 'import-from-env' -d 'Create a new AWS config profile with IAM credentials imported from environment. You must have $AWS_ACCESS_KEY_ID and $AWS_SECRET_ACCESS_KEY set in  your environment'
complete -c granted -n '__fish_seen_subcommand_from import-from-env' -f -l profile -r
complete -c granted -n '__fish_seen_subcommand_from credential-process' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'credential-process' -d 'Exports AWS session credentials for use with AWS CLI credential_process'
complete -c granted -n '__fish_seen_subcommand_from credential-process' -f -l profile -r
complete -c granted -n '__fish_seen_subcommand_from credential-process' -f -l url -r
complete -c granted -n '__fish_seen_subcommand_from credential-process' -f -l window -r
complete -c granted -n '__fish_seen_subcommand_from credential-process' -f -l auto-login -d 'automatically open the configured browser to log in if needed'
complete -c granted -n '__fish_seen_subcommand_from credential-process' -f -l no-cache -d 'Disables caching of session credentials and forces a refresh'
complete -c granted -n '__fish_seen_subcommand_from registry' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'registry' -d 'Manage Profile Registries'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from registry' -a 'add' -d 'Provide git repository you want to sync with aws config file'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l name -s n -r -d 'A unique name for the profile registry'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l url -s u -r -d 'The URL for the registry'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l path -s p -r -d 'For git registries: provide path if only the subfolder needs to be synced'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l filename -s f -r -d 'For git registries:  provide filename if yml file is not granted.yml'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l priority -r -d 'The priority for the profile registry'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l prefix-all-profiles -s pap -d 'Provide this flag if you want to append registry name to all profiles'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l prefix-duplicate-profiles -s pdp -d 'Provide this flag if you want to append registry name to duplicate profiles'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l write-on-sync-failure -s wosf -d 'Always overwrite AWS config, even if sync fails (DEPRECATED)'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l required-key -s r -s requiredKey -r -d 'Used to bypass the prompt or override user specific values'
complete -c granted -n '__fish_seen_subcommand_from add' -f -l type -r -d 'specify the type of granted registry source you want to set up. Default: git'
complete -c granted -n '__fish_seen_subcommand_from sync' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from registry' -a 'sync' -d 'Pull the latest change from remote origin and sync aws profiles in aws config files'
complete -c granted -n '__fish_seen_subcommand_from remove' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from registry' -a 'remove' -d 'Unsubscribe from a Profile Registry'
complete -c granted -n '__fish_seen_subcommand_from migrate' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from registry' -a 'migrate' -d 'Migrate Profile Registry Configuration'
complete -c granted -n '__fish_seen_subcommand_from setup' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from registry' -a 'setup' -d 'Setup a Profile Registry repository'
complete -c granted -n '__fish_seen_subcommand_from setup' -f -l dir -s d -r -d 'Directory to setup the Profile Registry'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'console' -d 'Generate an AWS console URL using credentials in the environment or with a credential process.'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l service -r
complete -c granted -n '__fish_seen_subcommand_from console' -f -l region -r
complete -c granted -n '__fish_seen_subcommand_from console' -f -l destination -r -d 'The destination URL for the console'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l url -d 'Return the URL to stdout instead of launching the browser'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l firefox -d 'Generate the Firefox container URL'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l color -r -d 'When the firefox flag is true, this specifies the color of the container tab'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l icon -r -d 'When firefox flag is true, this specifies the icon of the container tab'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l container-name -r -d 'When firefox flag is true, this specifies the name of the container of the container tab.'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l browser-launch-template-arg -r -d 'Additional arguments to provide to the browser launch template command in key=value format, e.g. \'--browser-launch-template-arg foo=bar'
complete -c granted -n '__fish_seen_subcommand_from login' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'login' -d 'Log in to Glide [deprecated]'
complete -c granted -n '__fish_seen_subcommand_from login' -f -l lazy -d 'When the lazy flag is used, a login flow will only be started when the access token is expired'
complete -c granted -n '__fish_seen_subcommand_from experimental exp' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'experimental exp'
complete -c granted -n '__fish_seen_subcommand_from request' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from experimental exp' -a 'request' -d 'Request access to a role'
complete -c granted -n '__fish_seen_subcommand_from aws' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request' -a 'aws' -d 'Request access to an AWS role'
complete -c granted -n '__fish_seen_subcommand_from aws' -f -l account -r -d 'The AWS account ID'
complete -c granted -n '__fish_seen_subcommand_from aws' -f -l role -r -d 'The AWS role'
complete -c granted -n '__fish_seen_subcommand_from aws' -f -l reason -r -d 'A reason for access'
complete -c granted -n '__fish_seen_subcommand_from aws' -f -l duration -r -d 'Duration of request, defaults to max duration of the access rule.'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request' -a 'latest' -d 'Request access to the latest AWS role you attempted to use'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l reason -r -d 'A reason for access'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l duration -r -d 'Duration of request, defaults to max duration of the access rule.'
complete -c granted -n '__fish_seen_subcommand_from cache' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'cache' -d 'Manage your cached credentials that are stored in secure storage'
complete -c granted -n '__fish_seen_subcommand_from clear' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from cache' -a 'clear' -d 'Clear cached credential from the secure storage'
complete -c granted -n '__fish_seen_subcommand_from clear' -f -l all -d 'clears all of the cached credentials from all secure storage'
complete -c granted -n '__fish_seen_subcommand_from clear' -f -l storage -r -d 'Specify the storage type'
complete -c granted -n '__fish_seen_subcommand_from list' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from cache' -a 'list' -d 'List currently cached credentials and secure storage type'
complete -c granted -n '__fish_seen_subcommand_from auth' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'auth' -d 'Manage OIDC authentication for Granted'
complete -c granted -n '__fish_seen_subcommand_from configure' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from auth' -a 'configure' -d 'Configure CLI'
complete -c granted -n '__fish_seen_subcommand_from configure' -f -l context-name -r
complete -c granted -n '__fish_seen_subcommand_from login' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from auth' -a 'login' -d 'Authenticate to an OIDC provider'
complete -c granted -n '__fish_seen_subcommand_from logout' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from auth' -a 'logout' -d 'Log out of an OIDC provider'
complete -c granted -n '__fish_seen_subcommand_from context' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from auth' -a 'context' -d 'Manage your current CLI context'
complete -c granted -n '__fish_seen_subcommand_from switch' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from context' -a 'switch'
complete -c granted -n '__fish_seen_subcommand_from request' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'request' -d 'Request access to a role'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request' -a 'latest' -d 'Request access to the latest AWS role you attempted to use'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l reason -r -d 'A reason for access'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l attach -r -d 'Attach justifications to your request, such as a Jira ticket id or url `--attach=TP-123`'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l duration -r -d 'Duration of request, defaults to max duration of the access rule.'
complete -c granted -n '__fish_seen_subcommand_from latest' -f -l confirm -s y -d 'Skip confirmation prompts for access requests'
complete -c granted -n '__fish_seen_subcommand_from check' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request' -a 'check' -d 'Check the Common Fate JIT backend to see whether Just-In-Time access to a particular entitlement is active'
complete -c granted -n '__fish_seen_subcommand_from check' -f -l aws-profile -r -d 'Check for access for a particular AWS profile'
complete -c granted -n '__fish_seen_subcommand_from close' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from request' -a 'close' -d 'Close an active Just-In-Time access to a particular entitlement'
complete -c granted -n '__fish_seen_subcommand_from close' -f -l profile -r -d 'Close a JIT access for a particular AWS profile'
complete -c granted -n '__fish_seen_subcommand_from close' -f -l request-id -r -d 'Close a JIT access for a particular access request ID'
complete -c granted -n '__fish_seen_subcommand_from doctor' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'doctor' -d 'Run diagnostics locally to help debug common issues relating to granted and aws'
complete -c granted -n '__fish_seen_subcommand_from doctor' -f -l profile -r
complete -c granted -n '__fish_seen_subcommand_from rds' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'rds' -d 'Granted RDS plugin'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from rds' -a 'proxy' -d 'The Proxy plugin is used in conjunction with a Commnon Fate deployment to request temporary access to an AWS RDS Database'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l target -s database -r
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l role -s user -r
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l port -r -d 'The local port to forward the database connection to'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l reason -r -d 'Provide a reason for requesting access to the role'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l attach -r -d 'Attach justifications to your request, such as a Jira ticket id or url `--attach=TP-123`'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l confirm -s y -d 'Skip confirmation prompts for access requests'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l wait -d 'Wait for the access request to be approved.'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l no-cache -d 'Disables caching of session credentials and forces a refresh'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l duration -s d -r -d 'The duration for your access request'
complete -c granted -n '__fish_seen_subcommand_from common-fate cf' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'common-fate cf' -d 'Interact with your Common Fate deployment'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from common-fate cf' -a 'console' -d 'Generate an AWS console URL using credentials in the environment or with a credential process.'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l service -r
complete -c granted -n '__fish_seen_subcommand_from console' -f -l region -r
complete -c granted -n '__fish_seen_subcommand_from console' -f -l destination -r -d 'The destination URL for the console'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l url -d 'Return the URL to stdout instead of launching the browser'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l firefox -d 'Generate the Firefox container URL'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l color -r -d 'When the firefox flag is true, this specifies the color of the container tab'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l icon -r -d 'When firefox flag is true, this specifies the icon of the container tab'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l container-name -r -d 'When firefox flag is true, this specifies the name of the container of the container tab.'
complete -c granted -n '__fish_seen_subcommand_from console' -f -l browser-launch-template-arg -r -d 'Additional arguments to provide to the browser launch template command in key=value format, e.g. \'--browser-launch-template-arg foo=bar'
complete -c granted -n '__fish_seen_subcommand_from eks' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'eks' -d 'Granted EKS plugin'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_seen_subcommand_from eks' -a 'proxy' -d 'The Proxy plugin is used in conjunction with a Commnon Fate deployment to request temporary access to an AWS EKS Cluster'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l target -s cluster -r
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l role -s service-account -r
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l reason -r -d 'Provide a reason for requesting access to the role'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l attach -r -d 'Attach justifications to your request, such as a Jira ticket id or url `--attach=TP-123`'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l confirm -s y -d 'Skip confirmation prompts for access requests'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l wait -d 'Wait for the access request to be approved.'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l no-cache -d 'Disables caching of session credentials and forces a refresh'
complete -c granted -n '__fish_seen_subcommand_from proxy' -f -l duration -s d -r -d 'The duration for your access request'
complete -c granted -n '__fish_seen_subcommand_from help h' -f -l help -s h -d 'show help'
complete -r -c granted -n '__fish_granted_no_subcommand' -a 'help h' -d 'Shows a list of commands or help for one command'

# assume fish shell completion

function __fish_assume_no_subcommand --description 'Test if there has been any subcommand yet'
    for i in (commandline -opc)
        if contains -- $i
            return 1
        end
    end
    return 0
end

complete -c assume -n '__fish_assume_no_subcommand' -f -l console -s c -d 'Open a web console to the role'
complete -c assume -n '__fish_assume_no_subcommand' -f -l terminal -s t -d 'Use this with \'-c\' to open a console session and export credentials into the terminal at the same time.'
complete -c assume -n '__fish_assume_no_subcommand' -f -l env -s e -d 'Export credentials to a .env file'
complete -c assume -n '__fish_assume_no_subcommand' -f -l export -s ex -d 'Export credentials to a ~/.aws/credentials file'
complete -c assume -n '__fish_assume_no_subcommand' -f -l export-sso-token -s es -d 'Export sso token to ~/.aws/sso/cache'
complete -c assume -n '__fish_assume_no_subcommand' -f -l unset -s un -d 'Unset all environment variables configured by Assume'
complete -c assume -n '__fish_assume_no_subcommand' -f -l url -s u -d 'Get an active console session url'
complete -c assume -n '__fish_assume_no_subcommand' -f -l service -s s -r -d 'Like --c, but opens to a specified service'
complete -c assume -n '__fish_assume_no_subcommand' -f -l region -s r -r -d 'region to launch the console or export to the terminal'
complete -c assume -n '__fish_assume_no_subcommand' -f -l console-destination -s cd -r -d 'Open a web console at this destination'
complete -c assume -n '__fish_assume_no_subcommand' -f -l pass-through -s pt -r -d 'Pass args to proxy assumer'
complete -c assume -n '__fish_assume_no_subcommand' -f -l active-role -s ar -d 'Open console using active role'
complete -c assume -n '__fish_assume_no_subcommand' -f -l verbose -d 'Log debug messages'
complete -c assume -n '__fish_assume_no_subcommand' -f -l auto-configure-shell -d 'Configure shell alias without prompts'
complete -c assume -n '__fish_assume_no_subcommand' -f -l exec -r -d 'Assume a profile then execute this command'
complete -c assume -n '__fish_assume_no_subcommand' -f -l duration -s d -r -d 'Set session duration for your assumed role'
complete -c assume -n '__fish_assume_no_subcommand' -f -l sso -d 'Assume an account and role with provided SSO flags'
complete -c assume -n '__fish_assume_no_subcommand' -f -l sso-start-url -r -d 'Use this in conjunction with --sso, the sso-start-url'
complete -c assume -n '__fish_assume_no_subcommand' -f -l sso-region -r -d 'Use this in conjunction with --sso, the sso-region'
complete -c assume -n '__fish_assume_no_subcommand' -f -l account-id -r -d 'Use this in conjunction with --sso, the account-id'
complete -c assume -n '__fish_assume_no_subcommand' -f -l role-name -r -d 'Use this in conjunction with --sso, the role-name'
complete -c assume -n '__fish_assume_no_subcommand' -f -l browser-profile -s bp -r -d 'Use a pre-existing profile in your browser'
complete -c assume -n '__fish_assume_no_subcommand' -f -l mfa-token -r -d 'Provide your current MFA token for the role you are assuming to skip being prompted'
complete -c assume -n '__fish_assume_no_subcommand' -f -l save-to -r -d 'Use this in conjunction with --sso, the profile name to save the role to in your AWS config file'
complete -c assume -n '__fish_assume_no_subcommand' -f -l export-all-env-vars -s x -d 'Exports all available credentials to the terminal when used with a profile configured for credential-process. Without this flag, only the AWS_PROFILE will be configured'
complete -c assume -n '__fish_assume_no_subcommand' -f -l aws-config-file -r
complete -c assume -n '__fish_assume_no_subcommand' -f -l chain -r -d 'Assume a given role ARN using the profile selected'
complete -c assume -n '__fish_assume_no_subcommand' -f -l reason -r -d 'Provide a reason for requesting access to the role'
complete -c assume -n '__fish_assume_no_subcommand' -f -l confirm -s y -d 'Skip confirmation prompts for access requests'
complete -c assume -n '__fish_assume_no_subcommand' -f -l wait -d 'When using Granted with Common Fate the assume will halt while waiting for the access request to be approved.'
complete -c assume -n '__fish_assume_no_subcommand' -f -l no-cache -d 'Disables caching of session credentials and forces a refresh'
complete -c assume -n '__fish_assume_no_subcommand' -f -l browser-launch-template-arg -r -d 'Additional arguments to provide to the browser launch template command in key=value format, e.g. \'--browser-launch-template-arg foo=bar'
complete -c assume -n '__fish_assume_no_subcommand' -f -l skip-profile-registry-sync -d 'You can use this to skip the automated profile registry sync process.'
complete -c assume -n '__fish_assume_no_subcommand' -f -l attach -r -d 'Attach justifications to your request, such as a Jira ticket id or url `--attach=TP-123`'
complete -c assume -n '__fish_assume_no_subcommand' -f -l help -s h -d 'show help'
complete -c assume -n '__fish_assume_no_subcommand' -f -l version -s v -d 'print the version'
